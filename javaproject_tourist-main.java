/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tourist;
//import java.lang.System.Logger;
//import java.lang.System.Logger.Level;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author POORNIMA
 */
public class location extends javax.swing.JFrame {
    
    Connection con1;
    PreparedStatement insert;

    /**
     * Creates new form location
     */
    public location() {
        initComponents();
        table_update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
private void table_update(){
            int c;
            try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3307/tms","root","");
            insert=con1.prepareStatement("SELECT * FROM loc");
            ResultSet rs=insert.executeQuery();
            ResultSetMetaData Rss=rs.getMetaData();
            c=Rss.getColumnCount();
            DefaultTableModel Df=(DefaultTableModel)jTable2.getModel();
            Df.setRowCount(0);
            while(rs.next())
            {
                Vector v2=new Vector();
                for(int a=1;a<=c;a++)
                {
                    //v2.add(rs.getString("id"));
                    v2.add(rs.getString("loc"));
                    v2.add(rs.getString("search"));
                    v2.add(rs.getString("res"));
                    
                }
                Df.addRow(v2);
            }
        } 
        catch (ClassNotFoundException | SQLException ex){
            Logger.getLogger(location.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_loc = new javax.swing.JTextField();
        txt_search = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txt_res = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Tourist Management System");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Enter your current location :");

        txt_loc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_locActionPerformed(evt);
            }
        });

        txt_search.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_search.setForeground(new java.awt.Color(51, 51, 51));
        txt_search.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nearby Cities", "Nearby Restaurant" }));
        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Search for :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Result :");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txt_res.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_resActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_loc, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_res, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(jButton1)
                .addGap(43, 43, 43)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_loc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txt_res, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Current location", "Search for", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(246, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_locActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_locActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txt_locActionPerformed

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
                                               
       String loc = txt_loc.getText().toLowerCase();  // Convert to lowercase for case-insensitive matching
    
    // Step 2: Get the selected option from the dropdown
    String selectedOption = txt_search.getSelectedItem().toString();  
    
    // Step 3: Prepare the array of results based on location and selected option
    String[] results;  
    
    switch (loc) {
        case "kanyakumari":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Nagercoil,", "Kalkulam,", "Thuckalay,", "Padmanabhapuram"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"King's Chick,", "The Curry House,", "Hotel Sea View,", "Sree Krishna Restaurant"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "tirunelveli":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Tenkasi,", "Nanguneri,", "Vikramasingapuram,", "Vellamadam"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Sri Siva Venu Restaurant,", "Tirunelveli Aandi Restaurant,", "Anbu Unavu,", "Hotel Sree Akshaya"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "erode":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Bhavani,", "Perundurai,", "Sivagiri,", "Kodumudi"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Erode Royal Chettinad,", "Jannal Restaurant,", "Barbequeen Restaurant,", "Taj Restaurant"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "coimbatore":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Pollachi,", "Tiruppur,", "Mettupalayam,", "Udumalpet"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Annalakshmi,", "Shree Anandhaas,", "Hari Bhavanam,", "That's Y Food"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "ooty":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Coonoor,", "Gudalur,", "Kotagiri,", "Manjoor"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Earl's Secret,", "Cliff Top Restaurant,", "Nahar Restaurant,", "Ascot Multi Cuisine Restaurant"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "tirupur":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Avinashi,", "Palladam,", "Kangeyam,", "Dharapuram"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Hotel Gowri Krishna,", "Sri Anandaas,", "Banana Leaf,", "Delicious Restaurant"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "madurai":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Thiruparankundram,", "Kottampatti,", "Usilampatti,", "Melur"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Sri Venkateshwara Biryani,", "Dindigul Thalappakatti,", "Aasai Restaurant,", "Kumar Mess"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "chennai":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Kanchipuram,", "Tambaram,", "Madhavaram,", "Avadi"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Murugan Idli Shop,", "Anjappar Chettinad Restaurant,", "Buhari Restaurant,", "Sangeetha Vegetarian Restaurant"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "bangalore":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Mysore,", "Tumkur,", "Kolar,", "Chikkaballapur"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"MTR,", "Vidyarthi Bhavan,", "Brahmin's Coffee Bar,", "The Humming Tree"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "hyderabad":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Secunderabad,", "Rangareddy,", "Sangareddy,", "Mahbubnagar"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Paradise Biryani,", "Bawarchi,", "Chutneys,", "Nandhini Deluxe"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "delhi":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Gurgaon,", "Noida,", "Faridabad,", "Ghaziabad"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Karol Bagh Wale,", "Bukhara,", "Saravana Bhavan,", "Haldiram's"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "pune":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Lonavala,", "Khandala,", "Alibag,", "Talegaon"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Vaishali,", "Shivaji Park,", "The Great Indian Thali,", "Barbeque Nation"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "kolkata":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Howrah,", "Hooghly,", "North 24 Parganas,", "South 24 Parganas"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Oh! Calcutta,", "Bengal Cafe,", "Bhojohori Manna,", "Kewpie's"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "salem":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Attur,", "Mettur,", "Omalur,", "Peddanaickenpalayam"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Hotel Selvam,", "Adithya Restaurant,", "Sree Akshaya Hotel,", "Sri Balaji Bhavan"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "karur":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Aravakurichi,", "Puliampatti,", "K.paramathy,", "Dharapuram"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Sri Saravana Bhavan,", "Kumarasamy Hotel,", "Kumar Mess,", "Sree Saravana Bhavan"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "thanjavur":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Kumbakonam,", "Thiruvarur,", "Aruppukottai,", "Sirkazhi"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Hotel Sree Kavi,", "Thanjavur Mess,", "Siva's Restaurant,", "Biryani Point"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "namakkal":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Rasipuram,", "Kumarapalayam,", "Senthamangalam,", "Mohanur"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Hotel Karthik,", "Aasai Restaurant,", "Anandha Bhavan,", "Sri Sakthi Hotel"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        case "dindigul":
            if (selectedOption.equals("Nearby Cities")) {
                results = new String[]{"Palani,", "Vedasandur,", "Kodaikanal,", "Athoor"};
            } else if (selectedOption.equals("Nearby Restaurant")) {  // Fixed the spelling from "Resaturant" to "Restaurant"
                results = new String[]{"Dindigul Thalappakatti,", "Venu Restaurant,", "Sri Kannan Restaurant,", "Anandha Bhavan"};
            } else {
                results = new String[]{"Option not recognized"};
            }
            break;
        default:
            results = new String[]{"Location not recognized."};
    }  
    
    // Step 4: Display results with each item on a new line in the result text field
    StringBuilder displayText = new StringBuilder();
    for (String result : results) {
        displayText.append(result).append("\n");  // Append each result with a newline character
    }
    txt_res.setText(displayText.toString().trim());
    }//GEN-LAST:event_txt_searchActionPerformed
        
       
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        String loc = txt_loc.getText().trim();
    String search = txt_search.getSelectedItem().toString().trim();
    String res = txt_res.getText().trim();

    try {
        // Load MySQL driver
        Class.forName("com.mysql.cj.jdbc.Driver");
        // Establish a connection to the database
        con1 = DriverManager.getConnection("jdbc:mysql://localhost:3307/tms", "root", "");
        
        // Prepare SQL insert statement
        String sql = "INSERT INTO loc (loc, search, res) VALUES (?, ?, ?)";
        insert = con1.prepareStatement(sql);
        insert.setString(1, loc);
        insert.setString(2, search);
        insert.setString(3, res);
        
        // Execute the insert operation
        int rowsInserted = insert.executeUpdate();
        
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Record Added");
            table_update(); // Refresh the table to show new data
            txt_loc.setText("");
            txt_search.setSelectedIndex(0);
            txt_res.setText("");
            txt_loc.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "No record added, please try again.");
        }

    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(location.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        DefaultTableModel Df=(DefaultTableModel)jTable2.getModel();
        int selectedIndex=jTable2.getSelectedRow();
        txt_loc.setText(Df.getValueAt(selectedIndex, 0).toString());
        txt_search.setSelectedItem(Df.getValueAt(selectedIndex, 1).toString());
        txt_res.setText(Df.getValueAt(selectedIndex, 2).toString());
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Df=(DefaultTableModel)jTable2.getModel();
        int selectedIndex=jTable2.getSelectedRow();
        try {
        // Load MySQL driver
        String loc=Df.getValueAt(selectedIndex, 0).toString();
        int dialogResult=JOptionPane.showConfirmDialog(null,"Do you want to Delete the record","Warning",JOptionPane.YES_NO_OPTION);
        if(dialogResult==JOptionPane.YES_OPTION){
            Class.forName("com.mysql.cj.jdbc.Driver");
        // Establish a connection to the database
        con1 = DriverManager.getConnection("jdbc:mysql://localhost:3307/tms", "root", "");
        
        // Prepare SQL insert statement
        String sql = "delete from loc where loc=?";
        insert = con1.prepareStatement(sql);
        insert.setString(1, loc);
        //insert.setString(2, search);
        //insert.setString(3, res);
         int rowsInserted = insert.executeUpdate();
        
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Record Deleted");
            table_update(); // Refresh the table to show new data
            txt_loc.setText("");
            txt_search.setSelectedIndex(0);
            txt_res.setText("");
            txt_loc.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "No record added, please try again.");
        }
        }
        
        
        // Execute the insert operation
       

    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(location.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_resActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_resActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_resActionPerformed

public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new location().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txt_loc;
    private javax.swing.JTextField txt_res;
    private javax.swing.JComboBox<String> txt_search;
    // End of variables declaration//GEN-END:variables

    //private void While(boolean next) {
    //    throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    //}
}
